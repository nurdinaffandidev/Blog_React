### âœ… What does it mean to destructure in React?

Destructuring in React (and JavaScript) means pulling values out of objects or arrays into separate variables â€” making your code cleaner and easier to read.

Itâ€™s super common in React for 'props', 'state', and 'arrays'.

---

## ðŸ§  1. Destructuring Props

### ðŸ”¸ Without destructuring:

```jsx
function Greeting(props) {
  return <h1>Hello, {props.name}!</h1>;
}
```

### âœ… With destructuring:

```jsx
function Greeting({ name }) {
  return <h1>Hello, {name}!</h1>;
}
```

> You're pulling `name` directly out of the `props` object.

---

## ðŸ§  2. Destructuring useState

```jsx
const [count, setCount] = useState(0);
```

> You're destructuring the array returned by `useState`.

This is equivalent to:

```js
const stateArray = useState(0);
const count = stateArray[0];
const setCount = stateArray[1];
```

But the destructured version is **cleaner**.

---

## ðŸ§  3. Destructuring Inside Components

```jsx
const Blog = ({ title, author, content }) => {
  return (
    <div>
      <h2>{title}</h2>
      <p>{content}</p>
      <small>By {author}</small>
    </div>
  );
};
```

> You pull out values directly from props when they come in.

---

## ðŸ’¡ Why use destructuring in React?

* Cleaner code
* Avoids repetitive `props.` or `state.`
* Makes components easier to read

---