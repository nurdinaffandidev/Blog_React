### ✅ What is a Stateless Functional Component in React?

A stateless functional component is a plain JavaScript function that:

* Takes props as input
* Returns JSX as output
* Does not manage any internal state (like `useState`)
* Is typically pure and easy to test

---

## 🧠 Example

```jsx
function Greeting({ name }) {
  return <h1>Hello, {name}!</h1>;
}
```

* This component just receives a prop and renders something.
* It has no state, no side effects — it's stateless.

---

## 🧩 Stateless vs Stateful

| Feature               | Stateless Functional Component | Stateful Functional Component     |
| --------------------- | ------------------------------ | --------------------------------- |
| Holds state?          | ❌ No                           | ✅ Yes (using `useState`, etc.)    |
| Uses lifecycle logic? | ❌ No                           | ✅ Yes (`useEffect`, etc.)         |
| Simpler to test?      | ✅ Yes                          | ⚠️ Sometimes                      |
| Purpose               | Display UI based on props      | Manage and react to state changes |

---

## ✅ Stateless Example

```jsx
const Welcome = ({ user }) => (
  <h2>Welcome, {user}</h2>
);
```

## ❌ Not Stateless (has state)

```jsx
const Counter = () => {
  const [count, setCount] = useState(0);
  return <button onClick={() => setCount(count + 1)}>{count}</button>;
};
```

---

## 📝 Summary

* Stateless = No `useState`, no side effects
* Pure functions: same output for same input
* Great for reusable UI pieces like headers, footers, buttons

---