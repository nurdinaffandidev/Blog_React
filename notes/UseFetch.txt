### ‚úÖ What is `useFetch` in React?

`useFetch` is not a built-in React Hook, but it‚Äôs a custom hook that developers create reuse fetch logic (like calling APIs) across components.

---

## üß† Why use `useFetch`?

Without it, you'd repeat the same `useEffect` + `fetch` logic in every component.
`useFetch` makes API data fetching cleaner and reusable.

---

## üîß Example: Simple `useFetch` Hook

```js
import { useState, useEffect } from "react";

const useFetch = (url) => {
  const [data, setData] = useState(null);
  const [isPending, setIsPending] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetch(url)
      .then(res => {
        if (!res.ok) {
          throw Error("Could not fetch data");
        }
        return res.json();
      })
      .then(data => {
        setData(data);
        setIsPending(false);
        setError(null);
      })
      .catch(err => {
        setError(err.message);
        setIsPending(false);
      });
  }, [url]);

  return { data, isPending, error };
};
```

---

## ‚úÖ Using `useFetch` in a Component

```jsx
const BlogList = () => {
  const { data: blogs, isPending, error } = useFetch("http://localhost:8000/blogs");

  return (
    <div>
      {error && <p>{error}</p>}
      {isPending && <p>Loading...</p>}
      {blogs && blogs.map(blog => (
        <div key={blog.id}>{blog.title}</div>
      ))}
    </div>
  );
};
```

---

## üìò Summary

| Feature    | Purpose                       |
| ---------- | ----------------------------- |
| `useFetch` | Custom hook for data fetching |
| Reusable   | Works with any URL            |
| Clean code | Keeps components small        |

---
=======================================================================================================

Great! You're looking at the **TypeScript type definition** for the native JavaScript `fetch()` function.

Let‚Äôs break this down:

---

## üîç Full Signature:

```ts
function fetch(
  input: string | URL | globalThis.Request,
  init?: RequestInit
): Promise<Response>;
```

---

## ‚úÖ What is `fetch`?

The `fetch()` function is used to make HTTP requests (like GET, POST) from the browser or a JavaScript environment (e.g. Node with `fetch` support).

---

## üß© Parameters Explained:

### 1. `input` (Required)

```ts
string | URL | globalThis.Request
```

* The resource you want to fetch.
* Can be:

  * A string URL (`"https://api.example.com"`)
  * A `URL` object
  * A `Request` object (for advanced usage)

### 2. `init` (Optional)

```ts
RequestInit
```

* An optional object** to configure the request:

  ```ts
  {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  }
  ```

---

## üîÅ Return Type:

```ts
Promise<Response>
```

* It returns a Promise, which resolves to a **Response object**.
* You can call `.json()`, `.text()`, etc. on the response.

---

## ‚úÖ Example:

```js
fetch("https://jsonplaceholder.typicode.com/posts/1")
  .then(res => res.json())
  .then(data => console.log(data))
  .catch(err => console.error("Error:", err));
```

---

## üß† Summary

| Part                | Meaning                                       |
| ------------------- | --------------------------------------------- |
| `input`             | URL string, `URL` object, or `Request` object |
| `init`              | Optional settings (method, headers, body)     |
| `Promise<Response>` | Returns a promise with response data          |

---

=======================================================================================================

Let's break down the three types of inputs you can pass to `fetch()` in JavaScript and TypeScript:

---

## ‚úÖ 1. URL String

A URL string is the most common way to specify what resource you want to fetch.

```js
fetch("https://jsonplaceholder.typicode.com/posts/1")
```

* Just a plain string.
* Must be a valid URL (absolute or relative).
* Easiest and most common usage.

---

## ‚úÖ 2. URL Object

A `URL` object is a more powerful, structured representation of a URL.

```js
const url = new URL("https://jsonplaceholder.typicode.com/posts/1");
fetch(url);
```

Why use this?

* Easy to manipulate parts of a URL (like query parameters).
* Safer than manually building query strings.

```js
const url = new URL("https://api.example.com/search");
url.searchParams.set("q", "react");
fetch(url); // https://api.example.com/search?q=react
```

---

## ‚úÖ 3. Request Object

A `Request` object is an advanced way to wrap all fetch settings into one reusable object.

```js
const request = new Request("https://jsonplaceholder.typicode.com/posts/1", {
  method: "GET",
  headers: {
    "Content-Type": "application/json"
  }
});

fetch(request);
```

Use this when:

* You want to reuse the same request multiple times.
* You need full control over headers, body, etc.

---

## üß† Summary Table

| Type        | Example                       | When to Use                         |
| ----------- | ----------------------------- | ----------------------------------- |
| URL String  | `"https://api.example.com"`   | Simple, common usage                |
| URL Object  | `new URL("https://...")`      | Modify query params or parts safely |
| Request Obj | `new Request("...", options)` | Full control, advanced usage        |

---